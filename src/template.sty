% This template provides a big collection of packages and other utilities, that might be useful.
% Made with ðŸ’– by Emily3403
% Version 1.1

% It aims at having everything you *might* need and thus avoiding the need to include anything.
% While this approach is fundamentally slow, the pre-compiled format files fix this problem.

%  First of for some little notation.
%  This notation is used throughout the entire template when talking about key / value syntax.

%      KEY = VALUE
%        â†’ Here you have to set a VALUE for the KEY. There is only one option, being VALUE.

%      KEY = â€¦
%        â†’ Here some value is expected, but it may be arbitrary.
%          This usually arises, when another package is invoked and the macro passes the options down to that package.

%      KEY = [VALUE1 | VALUE2 | â€¦]
%        â†’ Here you have to set a value out of the values VALUE1, VALUE2, â€¦ for KEY.
%          Note: This notation usually implies that the values are mutually exclusive.
%                If this is not the case, then it is specified in the docstring.

%      VALUE
%        â†’ This option is a trigger. Any VALUE you set can be treated as an if.

%      [VALUE1 | VALUE2 | â€¦]
%        â†’ This options are also triggers, but with mutual exclusivity.

%      KEY1 / KEY2 / â€¦ = â€¦
%        â†’ You may also encounter this notation for key aliases.
%          Usually the KEY1 is the key that "does the stuff" and KEY2, â€¦ are just aliases for the key.
%      If a value is the default then `(default)` is written after the value.


% >>> How do I use this template?
% â†’ Include the command `\usepackage{template}` *after* the `\documentclass{â€¦}`.
%   Afterwards call the command `\useTemplateStatic

% Note:
%  All template files are expected to be found by the LaTeX compiler in the "main" directory
%  This can be achieved in the following ways (ordered from easiest to hardest):

%      Have the template files in the main directory in which you compile.
%        â†’ This is the most convenient solution, but in my opinion the worst.
%          Then your entire main directory will be bloated with useless files.

%      Have the template files in the directory `src/`
%        â†’ Then, they will be found automagically and everything will work.

%      Have the template files in a custom directory anywhere on your system.
%        â†’ You will have to setup either the `TEXINPUTS` environment variable or the \input@path macro.
%          You can have a look my redefinition of \input@path for an example on how to use it.

%      Place the template files / template directory into the /usr/share/â€¦/latex directory.
%        â†’ If you go with this solution you won't have to copy the template every time.
%          This sacrifices compatibility for time (and space) savings.

%      Have the template.fmt in the root directory.
%        â†’ The file is *very* big (7 MiB).

%      For convenience I symlink the template.fmt into every project.


%  Then, after your own configuration, you may invoke the processing / pagesetting. This is done by the command
%      \useTemplate[â€¦]

%  This command takes several arguments.

%      language / l = [english (default) | german]
%        â†’ This option sets the language of the template.
%          This currently only has the effekt of setting the [USEnglish | ngerman] option to be set in the `babel` package.
%              Note: If you change languages you may have to delete the `main.aux` file on your system.
%                    If you are using e.g. overleaf to handle the compilation this won't be necessary.

%          The above choices can be abbreviated by [e | g] for english / german respectively

%      [large (default) / l | medium / m | small / s]
%        â†’ Presets for the "level" - i.e. how much gets included - of the template.
%          These options are ordered by "how much" they include.

%      geometry / g = â€¦
%        â†’ This options sets the \geometry options.
%          Please refer to this package's documentation for the appropriate syntax.

%      pagestyle / p = [Emily (default) | None]
%        â†’ This option sets the pagestyle.
%          The option `Emily` is my personal default. If you want to set up your own pagestyle either refer to the code
%          of the pagestyle â†’ `\template@defaultlook` or set `pagestyle=None` and set it by yourself.

%      Ex / Exercise = â€¦
%        â†’ This sets the exercise number.
%          It may be any number which is appropriate for your document. Usually it is a Number âˆˆ [1, 2, â€¦]

%       minusPage = â€¦
%        â†’ This sets the number of pages to subtract from the total page count.
%          This is useful when you e.g. have a bibliography or something similar which takes up pages but is ultimately not part of the page total.

% Provided commands:
%  [\lf | \Lf | \LF | \n]
%  [\TODO | \todo | \ToDo]
%  \maketitle


% TODO: change \ifdefempty to something else.

\NeedsTeXFormat{LaTeX2e}

% Silence the "You have requested ..." errors.
\RequirePackage{silence}
\WarningFilter{latex}{You have requested package}


\ProvidesPackage{template}[2021/06/31 package template]

% When importing, take the src/ directory into consideration.
\providecommand*{\input@path}{}
\edef\input@path{{src/}\input@path}


% First we include some packages, which have to be present / are very commonly used.

\RequirePackage[T1]{fontenc}        %
\RequirePackage[utf8]{inputenc}     %
\RequirePackage{titling}            %
\RequirePackage{fancyhdr}           %
\RequirePackage{geometry}           %
\RequirePackage{lmodern}            %
\RequirePackage{amsmath}            % ---
\RequirePackage{amsfonts}           % The math packages
\RequirePackage{amssymb}            %
\RequirePackage{stmaryrd}           % -/-
\RequirePackage{datetime}           %
\RequirePackage{trace}              % Package for debugging
\RequirePackage{pgfkeys}            % This package is for digesting the [key=value] options.
\RequirePackage{csquotes}           % Nice quotes
\RequirePackage{xparse}             % Nice syntax for newcommands
\RequirePackage[lastpage]{zref}     % Package for the fancy pagenumber
\RequirePackage{nicefrac}           % Package for the fancy pagenumber
\RequirePackage{xurl}               % Package for better urls
\RequirePackage[svgnames]{xcolor}   % Colors!
\RequirePackage{tocloft}            % Manipulate the table of contents
\RequirePackage{hyperref}           % Make the links colorful!
\RequirePackage{graphicx}           %
\RequirePackage{xstring}            % /*
\RequirePackage{xspace}             %   Logic
\RequirePackage{ifthen}             %
\RequirePackage{xifthen}            % */
\RequirePackage{microtype}          % Micro adjustments for font settings
\RequirePackage{ifStatements}       % if statements for vim code formatting
\RequirePackage{ezkeys}             % provides `/.is code choice` handler.

%% Patch pgffor to be able to contain \par tokens
\patchcmd[\long]{\pgffor@normal@list}{}{}{}{}
\patchcmd[\long]{\pgffor@scanone}{}{}{}{}
\patchcmd[\long]{\pgffor@dots@in@}{}{}{}{}
\patchcmd[\long]{\pgffor@multiassignfinal}{}{}{}{}

% --- Setup pgfkeys ---

% The main command `\useTemplate` takes in a key=value delimited string.
% This has to be parsed and interpreted which is handled by the package `pgfkeys`.
% This is also the package used by `tikz`.

%  The package `pgfkeys` works mostly by assigning key-value pairs in a unix-like tree.
%  The tree is organized in the following manner:

%    /
%    â”‚
%    â”œâ”€â”€ key1
%    â”‚   â”œâ”€â”€ key1.1
%    â”‚   â”œâ”€â”€ key1.2
%    â”‚   â”œâ”€â”€ ...
%    â”‚
%    â”œâ”€â”€ key2
%    â”‚   â”œâ”€â”€ ...
%    â”œâ”€â”€ ...
%    â‹®

% Now we implement the top level key - which has to be variable and unique.
\providecommand{\template@keyname}{template commands}
\pgfkeys{/\template@keyname/.is family}




% Define the getter and setter which prepend the argument with \keyname.
\providecommand{\template@getkey}[3][]{\pgfkeysgetvalue{/\template@keyname\Ifdefempty{#1}{}{/#1}/#2}{#3}}
\providecommand{\template@setkey}[2][]{\pgfkeys{/\template@keyname\Ifdefempty{#1}{}{/#1}, #2}}


% Setup some general purpose macros that prepend the \keyname.
\providecommand{\template@makefamily}[1]{/\template@keyname/#1/.is family}
\providecommand{\template@setfamily}[1]{/\template@keyname/#1}

% -/- Setup pgfkeys ---


% --- Setup options ---

% Setup a new keyspace
\providecommand{\template@setupName}{setup}

% These are the maintained options. Usually you want to refer to the above documentation.
% In case it didn't get maintained / is out of date you can try to decipher this.
\pgfkeys{
    % setup the keyspace
    \template@makefamily{\template@setupName},
    \template@setfamily{\template@setupName},
    %
    % Configure language choices
    language/.is code choice,
    language/english/.code=\template@setLanguage{e},
    language/german/.code=\template@setLanguage{g},
    %
    % Pagestyle options
    pagestyle/.is code choice,
    pagestyle/None/.code={},
    pagestyle/Emily/.code=\template@defaultlook,
    %
    %
    % Aliases
    english/.code=\pgfkeysalso{language=english},
    german/.code=\pgfkeysalso{language=german},
    %
    % Set the defaults
    Ex/.initial=\relax,
    minusPage/.initial=0,
    language=english,
    pagestyle=Emily,
    geometry/.initial={a4paper, total={17cm,24cm}},
}

% The purpose of this macro is to digest the dynamic options which the user has given.
%  #1 = {KEY1 = VAL1, KEY2 = VAL2, â€¦}
%      String that gets interpreted by pgfkeys.
%      Please refer to the beginning of this file for the according documentation.
\providecommand{\useTemplate}[1][]{
    \template@setkey[\template@setupName]{#1}
    \template@setkey[\template@setupName]{language/.eval}
    % Get the exercise number if it is not given.
    \template@getkey[\template@setupName]{Ex}{\exerciseNumber}
    \if\relax\exerciseNumber
        \ClassWarning{template}{You did not supply an exercise number. If you know what you are doing, then go ahead. This might otherwise lead to problems.}{}
    \fi
    %
    \template@setkey[\template@setupName]{pagestyle/.eval}
    %
    % Now, digest the module options.
    \digestModules
}


% Sets the language options.
\providecommand{\template@setLanguage}[1]{
    % German
    \if#1g
        \RequirePackage[ngerman]{babel}
    \fi
    % English
    \if#1e
        \RequirePackage[USenglish]{babel}
    \fi
}

% Include the module choices. This is done now, rather than at the beginning, since it requires the `@setupName` keyspace and some other macros.
\RequirePackage{moduleStyles}


% -/- Setup options ---


% --- Setup paper look ---


% This is my personal preference for my documents.
% You may define your own custom style which you then use as your pagestyle.
\providecommand{\template@defaultlook}{
    % Set up the geometry
    \template@getkey[\template@setupName]{geometry}{\template@theGeometry}
    \template@getkey[\template@setupName]{minusPage}{\template@minusPage}
    %
    \expandafter\geometry\expandafter{\template@theGeometry}
    %
    \pagestyle{fancy}
    \fancyhf{}
    % Define the right header and footer.
    \fancyhead[R]{\thedate}
    \fancyfoot[C]{\thepage\;$\nicefrac{}{}$\;\the\numexpr\zref@extractdefault{LastPage}{page}{0}-\template@minusPage\relax}
    %
    % The left header is missing. This gets handled in the module style.
    % Depending on which module we have, one might want different people included.
    %
    % Make the fancy header options.
    \setlength{\headheight}{20pt}
    \setlength{\headsep}{25pt}
    \renewcommand{\headrulewidth}{0.5pt}
    %
    % Better footnote settings
    \setlength{\footnotesep}{11pt}
    \setlength{\skip\footins}{19pt}
    %
    \setlength{\tabcolsep}{5pt}         % More space in tables.
    \setlength{\parindent}{0pt}         % No indents on newline.
    \RequirePackage{parskip}            % More space between paragraphs.
    \renewcommand{\arraystretch}{1.2}   % Make tables slightly bigger
}

% -/- Setup paper look ---


% --- General purpose macros ---

% These macros do the line feed (\n) character in LaTeX. The difference is, that additional space is inserted.
\providecommand{\LF}{\\[10pt]}
\providecommand{\Lf}{\\[7pt]}
\providecommand{\lf}{\\[3pt]}
\providecommand{\n}{\\[7pt]}


% Inserts the title page with no page numbering.
\let\oldMaketitle\maketitle
\renewcommand{\maketitle}{\pagenumbering{gobble}\oldMaketitle\newpage\pagenumbering{arabic}}

% Add `./images` to the graphics path
\graphicspath{{./images}}


% More colors!
\providecommand{\colorA}{Cyan}
\providecommand{\colorB}{ForestGreen}
\providecommand{\colorC}{VioletRed}
\providecommand{\colorD}{Dandelion}

% Hyperref colors
\hypersetup{
    colorlinks=true,
    linkcolor=black!10!blue,
    citecolor=black!10!blue,
    urlcolor=black!10!blue,
    linktocpage=true,
}

% A better hyperlink
\let\oldHref\href

\renewcommand{\href}[2]{%
    \oldHref{#1}{#2}\footnote{\url{#1}}%
}

\newcommand{\TODO}[1][]{\textcolor{red}{TODO\if\relax\detokenize{#1}\relax\else: #1\fi}}
\newcommand{\todo}[1][]{\TODO[#1]}
\newcommand{\ToDo}[1][]{\TODO[#1]}

% Now get the things of the other template files.
\RequirePackage{templateMedium}
\RequirePackage{templateAll}

% -/- General purpose macros ---

% Final construct for format file
\ifdefined\endofdump\else
    \def\endofdump{}
\fi

